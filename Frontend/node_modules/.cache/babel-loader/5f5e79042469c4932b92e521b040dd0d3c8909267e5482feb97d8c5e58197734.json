{"ast":null,"code":"var _jsxFileName = \"/Users/kayleemarquez/Desktop/recipeprojecttwo/Frontend/src/pages/YourRecipePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction YourRecipePage() {\n  _s();\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  // const [username, setUsername] = useState('');\n  const [inputs, setInputs] = useState([{\n    id: 1,\n    value: \"\"\n  }]); // Initial input section\n\n  // Function to handle adding a new input\n  const handleAddInput = () => {\n    const newInput = {\n      id: inputs.length + 1,\n      value: \"\"\n    };\n    setInputs([...inputs, newInput]); // Add the new input to the state\n  };\n\n  // Function to handle input changes\n  const handleInputChange = (id, newValue) => {\n    setInputs(inputs.map(input => input.id === id ? {\n      ...input,\n      value: newValue\n    } : input));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('http://localhost:8001/returnusername', {\n        method: 'GET',\n        credentials: 'include' // Include session cookies\n      });\n      if (response.ok) {\n        const data = await response.json();\n        if (data.username) {\n          // setUsername(data.username);\n\n          const recipe = {\n            title,\n            description,\n            username: data.username,\n            steps: inputs\n          };\n          const response = await fetch(' http://localhost:8001/addrecipe', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            credentials: 'include',\n            body: JSON.stringify(recipe) // converts the user object into a json string so that it can be sent to the request body because it is currently a javascript object.\n          });\n          if (response.ok) {\n            alert(\"worked\");\n            // const data = await response.json();\n            // if (data.message){\n            //     alert (\"Worked\")\n            // }\n          } else {\n            alert(\"No\");\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      alert('An error occurred. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"title\",\n      children: \"Title:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      value: title,\n      onChange: e => setTitle(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"description\",\n      children: \"Description:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"description\",\n      value: description,\n      onChange: e => setDescription(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), inputs.map(input => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: `input-${input.id}`,\n        children: [\"Step \", input.id, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: `input-${input.id}`,\n        type: \"text\",\n        value: input.value,\n        onChange: e => handleInputChange(input.id, e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, input.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleAddInput,\n      children: \"Add Another Step\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Create New Recipe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(YourRecipePage, \"GPceMsbEkJ9g3BzJPFusT/jblaw=\");\n_c = YourRecipePage;\n;\nexport default YourRecipePage;\n\n// <button onClick={() => handleClickSignIn(\"Sign In\")}>\n// Click Here\n// </button>\n\n// const handleClickSignIn = async (action) => {\n\n//     const response = await fetch('http://localhost:8001/returnusername', {\n//         method: 'GET',\n//         credentials: 'include', // Include session cookies\n//       });\n\n//         if(response.ok){\n//            // alert(\"Yes\");\n//            const data = await response.json();\n//            if (data.username){\n//            // alert(data.username);\n//            }\n//         }\n//    };\nvar _c;\n$RefreshReg$(_c, \"YourRecipePage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","YourRecipePage","_s","title","setTitle","description","setDescription","inputs","setInputs","id","value","handleAddInput","newInput","length","handleInputChange","newValue","map","input","handleSubmit","e","preventDefault","response","fetch","method","credentials","ok","data","json","username","recipe","steps","headers","body","JSON","stringify","alert","error","console","onSubmit","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","target","required","onClick","_c","$RefreshReg$"],"sources":["/Users/kayleemarquez/Desktop/recipeprojecttwo/Frontend/src/pages/YourRecipePage.js"],"sourcesContent":["import React, { useState } from \"react\";\n\n\nfunction YourRecipePage() {\n\n    const [title, setTitle] = useState('');\n    const [description, setDescription] = useState('');\n   // const [username, setUsername] = useState('');\n    const [inputs, setInputs] = useState([{ id: 1, value: \"\" }]); // Initial input section\n\n    // Function to handle adding a new input\n    const handleAddInput = () => {\n      const newInput = { id: inputs.length + 1, value: \"\" };\n      setInputs([...inputs, newInput]); // Add the new input to the state\n    };\n  \n    // Function to handle input changes\n    const handleInputChange = (id, newValue) => {\n      setInputs(inputs.map(input => \n        input.id === id ? { ...input, value: newValue } : input\n      ));\n    };\n  \n\n    const handleSubmit = async (e) => {\n        e.preventDefault(); \n        try {\n          const response = await fetch('http://localhost:8001/returnusername', {\n            method: 'GET',\n            credentials: 'include', // Include session cookies\n          });\n    \n          if (response.ok) {\n            const data = await response.json();\n            if (data.username) {\n              \n             // setUsername(data.username);\n\n              const recipe = {\n                title,\n                description,\n                username: data.username,\n                steps: inputs\n              };\n          \n          \n              const response = await fetch(' http://localhost:8001/addrecipe', {\n                method: 'POST', \n                headers: { 'Content-Type': 'application/json' }, \n                credentials: 'include', \n                body: JSON.stringify(recipe) // converts the user object into a json string so that it can be sent to the request body because it is currently a javascript object.\n              })\n\n              if (response.ok){\n                alert (\"worked\");\n                // const data = await response.json();\n                // if (data.message){\n                //     alert (\"Worked\")\n                // }\n            }\n            else {\n                alert(\"No\");\n            }\n\n            } \n          } \n\n        } catch (error) {\n          console.error('Error fetching data:', error);\n          alert('An error occurred. Please try again.');\n        }\n      };\n\nreturn(\n    <form onSubmit={handleSubmit} >\n        <label htmlFor=\"title\">\n          Title:\n        </label>\n        <input\n          type=\"text\"\n          id=\"title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n        <label htmlFor=\"description\">\n        Description:\n        </label>\n        <input\n          type=\"text\"\n          id=\"description\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n        />\n\n\n        \n      {inputs.map(input => (\n        <div key={input.id}>\n          <label htmlFor={`input-${input.id}`}>\n            Step {input.id}:\n          </label>\n          <input\n            id={`input-${input.id}`}\n            type=\"text\"\n            value={input.value}\n            onChange={(e) => handleInputChange(input.id, e.target.value)}\n            \n            required\n          />\n        </div>\n      ))}\n      <button type=\"button\" onClick={handleAddInput}>\n        Add Another Step\n      </button>\n\n\n\n\n          <button\n          type=\"submit\"\n          >\n          Create New Recipe\n        </button>\n\n\n\n\n    </form>\n\n);\n\n};\n\n\nexport default YourRecipePage;\n\n\n\n// <button onClick={() => handleClickSignIn(\"Sign In\")}>\n// Click Here\n// </button>\n\n\n// const handleClickSignIn = async (action) => {\n\n//     const response = await fetch('http://localhost:8001/returnusername', {\n//         method: 'GET',\n//         credentials: 'include', // Include session cookies\n//       });\n\n//         if(response.ok){\n//            // alert(\"Yes\");\n//            const data = await response.json();\n//            if (data.username){\n//            // alert(data.username);\n//            }\n//         }\n//    };"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGxC,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EAEtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACnD;EACC,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,CAAC;IAAEW,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE9D;EACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,QAAQ,GAAG;MAAEH,EAAE,EAAEF,MAAM,CAACM,MAAM,GAAG,CAAC;MAAEH,KAAK,EAAE;IAAG,CAAC;IACrDF,SAAS,CAAC,CAAC,GAAGD,MAAM,EAAEK,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC,CAAC;;EAED;EACA,MAAME,iBAAiB,GAAGA,CAACL,EAAE,EAAEM,QAAQ,KAAK;IAC1CP,SAAS,CAACD,MAAM,CAACS,GAAG,CAACC,KAAK,IACxBA,KAAK,CAACR,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGQ,KAAK;MAAEP,KAAK,EAAEK;IAAS,CAAC,GAAGE,KACpD,CAAC,CAAC;EACJ,CAAC;EAGD,MAAMC,YAAY,GAAG,MAAOC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;QACnEC,MAAM,EAAE,KAAK;QACbC,WAAW,EAAE,SAAS,CAAE;MAC1B,CAAC,CAAC;MAEF,IAAIH,QAAQ,CAACI,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClC,IAAID,IAAI,CAACE,QAAQ,EAAE;UAElB;;UAEC,MAAMC,MAAM,GAAG;YACb1B,KAAK;YACLE,WAAW;YACXuB,QAAQ,EAAEF,IAAI,CAACE,QAAQ;YACvBE,KAAK,EAAEvB;UACT,CAAC;UAGD,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;YAC/DC,MAAM,EAAE,MAAM;YACdQ,OAAO,EAAE;cAAE,cAAc,EAAE;YAAmB,CAAC;YAC/CP,WAAW,EAAE,SAAS;YACtBQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,MAAM,CAAC,CAAC;UAC/B,CAAC,CAAC;UAEF,IAAIR,QAAQ,CAACI,EAAE,EAAC;YACdU,KAAK,CAAE,QAAQ,CAAC;YAChB;YACA;YACA;YACA;UACJ,CAAC,MACI;YACDA,KAAK,CAAC,IAAI,CAAC;UACf;QAEA;MACF;IAEF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CD,KAAK,CAAC,sCAAsC,CAAC;IAC/C;EACF,CAAC;EAEP,oBACInC,OAAA;IAAMsC,QAAQ,EAAEpB,YAAa;IAAAqB,QAAA,gBACzBvC,OAAA;MAAOwC,OAAO,EAAC,OAAO;MAAAD,QAAA,EAAC;IAEvB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACR5C,OAAA;MACE6C,IAAI,EAAC,MAAM;MACXpC,EAAE,EAAC,OAAO;MACVC,KAAK,EAAEP,KAAM;MACb2C,QAAQ,EAAG3B,CAAC,IAAKf,QAAQ,CAACe,CAAC,CAAC4B,MAAM,CAACrC,KAAK;IAAE;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,eACF5C,OAAA;MAAOwC,OAAO,EAAC,aAAa;MAAAD,QAAA,EAAC;IAE7B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACR5C,OAAA;MACE6C,IAAI,EAAC,MAAM;MACXpC,EAAE,EAAC,aAAa;MAChBC,KAAK,EAAEL,WAAY;MACnByC,QAAQ,EAAG3B,CAAC,IAAKb,cAAc,CAACa,CAAC,CAAC4B,MAAM,CAACrC,KAAK;IAAE;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAAC,EAIHrC,MAAM,CAACS,GAAG,CAACC,KAAK,iBACfjB,OAAA;MAAAuC,QAAA,gBACEvC,OAAA;QAAOwC,OAAO,EAAE,SAASvB,KAAK,CAACR,EAAE,EAAG;QAAA8B,QAAA,GAAC,OAC9B,EAACtB,KAAK,CAACR,EAAE,EAAC,GACjB;MAAA;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACR5C,OAAA;QACES,EAAE,EAAE,SAASQ,KAAK,CAACR,EAAE,EAAG;QACxBoC,IAAI,EAAC,MAAM;QACXnC,KAAK,EAAEO,KAAK,CAACP,KAAM;QACnBoC,QAAQ,EAAG3B,CAAC,IAAKL,iBAAiB,CAACG,KAAK,CAACR,EAAE,EAAEU,CAAC,CAAC4B,MAAM,CAACrC,KAAK,CAAE;QAE7DsC,QAAQ;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC;IAAA,GAXM3B,KAAK,CAACR,EAAE;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAYb,CACN,CAAC,eACF5C,OAAA;MAAQ6C,IAAI,EAAC,QAAQ;MAACI,OAAO,EAAEtC,cAAe;MAAA4B,QAAA,EAAC;IAE/C;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAKL5C,OAAA;MACA6C,IAAI,EAAC,QAAQ;MAAAN,QAAA,EACZ;IAEH;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAKP,CAAC;AAIX;AAAC1C,EAAA,CAhIQD,cAAc;AAAAiD,EAAA,GAAdjD,cAAc;AAgItB;AAGD,eAAeA,cAAc;;AAI7B;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}